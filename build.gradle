import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'

group = 'com.imcode.imcms'
version = '6.0.0-rc2-SNAPSHOT'

description = """imCMS"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven { url "http://repo.imcode.com/maven2" }
    maven { url "http://repo.boundlessgeo.com/main/" }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.20'
    compile group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.11.0'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile(group: 'org.apache.tika', name: 'tika-parsers', version: '1.11') {
        exclude(module: 'commons-logging')
        exclude(module: 'asm')
        exclude(module: 'commons-io')
    }
    compile(group: 'commons-validator', name: 'commons-validator', version: '1.6') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'net.sf.ehcache', name: 'ehcache-core', version: '2.6.9'
    compile group: 'net.sf.ehcache', name: 'ehcache-web', version: '2.0.4'
    compile group: 'commons-dbutils', name: 'commons-dbutils', version: '1.6'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.1'
    compile group: 'org.apache.commons', name: 'commons-email', version: '1.4'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '4.3.11.Final'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.4.2.Final'
    compile group: 'com.fasterxml', name: 'classmate', version: '1.3.3'
    compile group: 'com.imcode.db', name: 'imcode-db', version: '0.5-SNAPSHOT'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
    compile(group: 'com.imcode.util', name: 'imcode-util', version: '2.0.4') {
        exclude(module: 'servlet-api')
        exclude(module: 'commons-io')
    }
    compile group: 'com.imcode.ldap', name: 'imcode-ldap', version: '0.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.38'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
    compile(group: 'org.springframework', name: 'spring-core', version: '4.3.13.RELEASE') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.13.RELEASE'
    compile group: 'org.springframework', name: 'spring-orm', version: '4.3.13.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version: '4.3.13.RELEASE'
    compile group: 'org.aspectj', name: 'aspectjrt', version: '1.8.13'
    compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.13'
    compile(group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.11.7.RELEASE') {
        exclude(module: 'hibernate-jpa-2.1-api')
    }
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile group: 'org.apache.sanselan', name: 'sanselan', version: '0.97-incubator'
    compile(group: 'org.apache.solr', name: 'solr-core', version: '7.2.1') {
        exclude(module: 'slf4j-jdk14')
        exclude(module: 'javax.servlet')
        exclude(module: 'javax.transaction')
        exclude(module: 'javax.annotation')
        exclude(module: 'jackson-databind')
        exclude(module: 'jackson-core')
        exclude(module: 'commons-codec')
        exclude(module: 'commons-collections')
        exclude(module: 'commons-fileupload')
        exclude(module: 'commons-lang3')
        exclude(module: 'commons-lang')
        exclude(module: 'dom4j')
        exclude(module: 'javax.servlet-api')
        exclude(module: 'httpclient')
        exclude(module: 'httpcore')
        exclude(module: 'asm')
        exclude(module: 'asm')
        exclude(module: 'jcl-over-slf4j')
        exclude(module: 'slf4j-api')
        exclude(module: 'commons-exec')
        exclude(module: 'commons.lang')
        exclude(module: 'jackson-annotations')
    }
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'
    compile group: 'org.apache.tomcat', name: 'tomcat-jsp-api', version: '7.0.57'
    compile group: 'org.apache.tomcat', name: 'tomcat-el-api', version: '7.0.57'
    compile group: 'org.apache.tomcat', name: 'tomcat-jasper-el', version: '7.0.57'
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
    compile group: 'com.jcabi', name: 'jcabi-matchers', version: '1.4'
    compile group: 'javax.json', name: 'javax.json-api', version: '1.1.2'
    compile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: '2.2.0'
    compile(group: 'com.jcabi', name: 'jcabi-w3c', version: '1.3') {
        exclude(module: 'commons-io')
    }
    runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    runtime group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
    testCompile group: 'org.lazyluke', name: 'log4jdbc-remix', version: '0.2.7'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.dbunit', name: 'dbunit', version: '2.5.1'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.2'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.2'
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.3.13.RELEASE'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
}

//Migrated maven properties
def mavenProps = new Properties()

//Used to merge build and server properties file with replacement of inplace variables usage
def buildProps = new Properties()
def tmpProps = new Properties()

//Directory to hold temporary data
def tmpDir = "${buildDir}/tmp/"

//Translation Languages
def localizationLanguages = new ArrayList()

task initParams {
    mavenProps.setProperty('log4j.threshold', 'info')
    mavenProps.setProperty('log4j.hibernate.level', 'error')
    mavenProps.setProperty('log4j.console-appender.threshold', 'off')

    localizationLanguages.add("eng")
    localizationLanguages.add("swe")

    file("build.properties").withInputStream { buildProps.load(it) }
}

task copyProperties(type: Copy, dependsOn: initParams) {
    from "${projectDir}"
    include "build.properties"

    //Needed to perform this two times to replace inplace variables
    filter(ReplaceTokens, tokens: buildProps)
    filter(ReplaceTokens, tokens: buildProps)
    into tmpDir
}

task importProperties(dependsOn: copyProperties) {
    doLast {
        file("${tmpDir}/build.properties").withInputStream { tmpProps.load(it) }
    }
}


task explodedWar(type: Sync, dependsOn: war) {
    into "${buildDir}/exploded"
    with war
}

//Task dependency settings
copyProperties.finalizedBy importProperties
tasks.war.dependsOn importProperties

//Plugins setting up
jar.doFirst {
    manifest {
        def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
        if (new File(manifestFile).exists())
            from(manifestFile)

        attributes 'Build-Date': new Date()
        attributes 'Application-Version': project.version
        attributes 'Build-Jdk': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        attributes 'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        attributes 'Built-By': project.hasProperty('BF_USER') ? project.getProperty('BF_USER') : System.getProperty('user.name')
    }
}

war {
    classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
//    duplicatesStrategy 'include'

    manifest {
        def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
        if (new File(manifestFile).exists())
            from(manifestFile)

        attributes 'Build-Date': new Date()
        attributes 'Application-Version': project.version
        attributes 'Build-Jdk': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        attributes 'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        attributes 'Built-By': project.hasProperty('BF_USER') ? project.getProperty('BF_USER') : System.getProperty('user.name')
    }

    //Copying configuration files
    webInf {
        from 'src/main/resources'
        from 'src/main/resources-conf'

        include 'server.properties'
        include 'imcms_*.properties'
        include '*.conf'
        include 'log4j.xml'
        include '*.json'
        into "/WEB-INF/conf"
        filter(ReplaceTokens, tokens: tmpProps)
        filter(ReplaceTokens, tokens: mavenProps, beginToken: '${', endToken: '}')
    }

    //Copying ehcache configuration files
    webInf {
        from 'src/main/resources'
        include "ehcache.xml"
        include "ehcache.xsd"
        into "/WEB-INF/clases"
    }

    //Template localization
    def rootFolderForTemplates = "src/main/webapp/WEB-INF/templates/lang"
    def rootFolderForImcmsTemplates = "src/main/webapp/imcms/lang"

    def templatePatterns = new ArrayList()

    templatePatterns.add("**/*.jsp")
    templatePatterns.add("**/*.jspx")
    templatePatterns.add("**/*.htm")
    templatePatterns.add("**/*.html")

    def langProperties
    localizationLanguages.each { lang ->
        langProperties = new Properties()
        file("src/main/resources-conf/imcms_${lang}.properties").withInputStream { langProperties.load(it) }

        webInf {
            from rootFolderForTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/WEB-INF/templates/${lang}"
        }

        webInf {
            from rootFolderForTemplates
            exclude templatePatterns
            into "/WEB-INF/templates/${lang}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/imcms/${lang}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            exclude templatePatterns
            into "/imcms/${lang}"
        }
    }

    webInf {
        def versionFile = new File("${tmpDir}/version.txt")
        doFirst {
            versionFile.text = version
        }
        from versionFile
        into "/WEB-INF/"
    }
}