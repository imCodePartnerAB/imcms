import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'idea'
    id 'war'
    id 'pmd'

    id 'io.franzbecker.gradle-lombok' version '2.1'
}

group = "com.imcode.imcms"
version = "6.0.0-beta4-SNAPSHOT"

description = "imCMS"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = projectBuildSourceEncoding
    options.fork = javaCompileFork
}

repositories {
    jcenter()
    maven { url "http://repo.imcode.com/maven2" }
}

ext {
    springframeworkVersion = '5.1.5.RELEASE'
    hibernateVersion = '5.2.18.Final'
    solrVersion = '7.2.1'
    slf4jVersion = '1.7.26'
    junitVersion = '5.3.2'
    lombokVersion = '1.18.6'

    sharedManifest = manifest {
        attributes "Build-Date": new Date()
        attributes "Application-Version": project.version
        attributes "Build-Jdk": System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        attributes "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        attributes "Built-By": project.hasProperty('BF_USER') ? project.getProperty('BF_USER', null) : System.getProperty('user.name')
    }
}

dependencies {
    compile "org.projectlombok:lombok:${lombokVersion}"
    compile "com.drewnoakes:metadata-extractor:2.11.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.8"
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'

    compile "com.zaxxer:HikariCP:3.1.0"

    compile("com.imcode.db:imcode-db:0.7") {
        exclude(module: 'junit')
    }
    compile "com.imcode.ldap:imcode-ldap:0.1"
    compile("com.imcode.util:imcode-util:2.0.4") {
        exclude(module: "servlet-api")
        exclude(module: "commons-io")
    }
    compile "com.jcabi:jcabi-matchers:1.4"
    compile("com.jcabi:jcabi-w3c:1.3") {
        exclude(module: "commons-io")
    }
    compile 'com.squareup.okhttp3:okhttp:3.11.0'
    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile "commons-dbutils:commons-dbutils:1.6"
    compile "commons-lang:commons-lang:2.6"
    compile("commons-validator:commons-validator:1.6") {
        exclude(module: "commons-logging")
    }
    compile "javax.inject:javax.inject:1"
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "javax.servlet:jstl:1.2"
    compile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1"
    compile "javax.validation:validation-api:2.0.1.Final"
    compile("net.sf.ehcache:ehcache-web:2.0.4") {
        exclude(module: 'ehcache-core')
    }
    compile "org.apache.commons:commons-collections4:4.3"
    compile "org.apache.commons:commons-email:1.5"
    compile "org.apache.commons:commons-lang3:3.8.1"
    compile "org.apache.commons:commons-text:1.6"
    compile("org.apache.httpcomponents:httpclient:4.5.7") {
        exclude(module: "commons-logging")
    }
    compile "org.apache.solr:solr-core:${solrVersion}"
    compile("org.apache.tika:tika-parsers:1.18") {
        exclude(module: "commons-logging")
        exclude(module: "asm")
        exclude(module: "commons-io")
    }
    compile "org.aspectj:aspectjrt:1.8.13"
    compile "org.aspectj:aspectjweaver:1.8.13"
    compile("org.hibernate:hibernate-ehcache:${hibernateVersion}") {
        exclude(module: "ehcache-core")
    }
    compile "org.hibernate.validator:hibernate-validator:6.0.15.Final"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.springframework:spring-aop:${springframeworkVersion}"
    compile("org.springframework:spring-core:${springframeworkVersion}") {
        exclude(module: 'commons-logging')
    }
    compile "org.springframework:spring-orm:${springframeworkVersion}"
    compile "org.springframework:spring-webmvc:${springframeworkVersion}"
    compile "org.springframework.data:spring-data-jpa:1.11.18.RELEASE"
    compile 'org.modelmapper:modelmapper:2.3.2'
    compile 'javax.interceptor:javax.interceptor-api:1.2.2'

    //Azure AD dependencies
    compile "com.microsoft.azure:adal4j:1.6.3"
    compile "com.nimbusds:oauth2-oidc-sdk:5.24.2"

    runtime "com.fasterxml:classmate:1.3.4"
    runtime "javax.el:javax.el-api:3.0.0"
    runtime "mysql:mysql-connector-java:8.0.15"
    runtime "org.hibernate:hibernate-core:${hibernateVersion}"
    runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    testCompile "com.jayway.jsonpath:json-path-assert:2.2.0"
    testCompile "org.dbunit:dbunit:2.5.4"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testCompile "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "org.mockito:mockito-junit-jupiter:2.+"
    testCompile "org.skyscreamer:jsonassert:1.5.0"
    testCompile "org.springframework:spring-test:${springframeworkVersion}"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

final def mavenProps = new Properties() //Migrated maven properties
//Used to merge build and server properties file with replacement of inplace variables usage
final def buildProps = new Properties()
final def serverProps = new Properties()

final def tmpDir = "${buildDir}/tmp/" //Directory to hold temporary data

final def localizationLanguages = new HashMap<String, String>() //Translation Languages

task initParams() {
    mavenProps.setProperty("log4j.threshold", "info")
    mavenProps.setProperty("log4j.hibernate.level", "error")
    mavenProps.setProperty("log4j.console-appender.threshold", "off")

    localizationLanguages.put("", "en")
    localizationLanguages.put("_sv", "sv")

    file("build.properties").withInputStream { buildProps.load(it) }

    buildProps.setProperty("imcms.version", project.version as String)
    file("src/main/resources-conf/server.properties").withInputStream { serverProps.load it }
}

task explodedWar(type: Sync, dependsOn: war) {
    into "${buildDir}/libs/exploded/${project.name}-${project.version}.war/"
    with war
}

task mergeProperties() {
    final def lines = file("src/main/resources-conf/server.properties").readLines()

    final def mergedProperties = new ArrayList<String>()
    final def customProps = buildProps.clone()

    lines.each {
        buildProps.each { final prop ->
            if (it.matches("^" + prop.key + "\\s*= *.*\\s*\$")) {
                it = prop.toString()
                customProps.remove(prop.key)
            }
        }

        mergedProperties.add(it)
    }

    mergedProperties.addAll(customProps.findAll())

    doLast {
        final def mergedPropertiesFile = file("${buildDir}/libs/exploded/${project.name}-${project.version}.war/WEB-INF/conf/server.properties")
        mergedPropertiesFile.withWriter { final out ->
            mergedProperties.each {
                out.println it
            }
        }
    }
}

task installWebDependencies(type: Exec) {
    executable = 'npm'
    args = ["install", "--prefix", "src/main/webapp/"]
}

task buildWeb(type: Exec, dependsOn: installWebDependencies) {
    executable = 'npm'
    args = ["run", "build:prod", "--prefix", "src/main/webapp/"]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
    manifest {
        from sharedManifest
    }
}

tasks.war {
    it.dependsOn initParams
    it.dependsOn test
    it.dependsOn buildWeb
}

explodedWar.finalizedBy mergeProperties

//Plugins setting up
lombok {
    version = lombokVersion
    sha256 = ""
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

pmd {//Here is available list of rules - https://pmd.github.io/pmd-6.5.0/pmd_rules_java.html
    ignoreFailures = true
}

jar {
    doFirst {
        manifest {
            from sharedManifest
        }
    }
    archiveClassifier = 'classes'
}

test {
    doFirst {
        copy {
            from "${buildDir}/resources/test"
            into "${buildDir}/classes/java/test"
        }
        copy {
            from "${buildDir}/resources/main"
            into "${buildDir}/classes/java/test"
        }
        useJUnitPlatform()
    }
}

war {
    exclude "dependency_path_resolver.js"
    exclude "node_modules"
    exclude "js"
    exclude ".babelrc"
    exclude "package-lock.json"
    exclude "base.config.js"
    exclude "webpack.config.js"
    exclude "prod.config.js"

    from("src/main/webapp/js/imcms/imcms_admin.js", { into "js/imcms" })
    from("src/main/webapp/js/imcms/imcms_config.js.jsp", { into "js/imcms" })

    manifest {
        from sharedManifest
    }

    //Copying configuration files
    webInf {
        from "src/main/resources"
        from "src/main/resources-conf"

        include "server.properties"
        include "imcms*.properties"
        include "*.conf"
        include "log4j.xml"
        include "*.json"
        into "/WEB-INF/conf"
        filter(ReplaceTokens, tokens: serverProps)
        filter(ReplaceTokens, tokens: buildProps)
        filter(ReplaceTokens, tokens: mavenProps, beginToken: '${', endToken: '}')
    }

    //Copying ehcache configuration files
    webInf {
        from "src/main/resources"
        include "ehcache.xml"
        include "ehcache.xsd"
        into "/WEB-INF/classes"
    }

    //Template localization
    final def rootFolderForTemplates = "src/main/webapp/WEB-INF/templates/lang"
    final def rootFolderForImcmsTemplates = "src/main/webapp/imcms/lang"

    final def templatePatterns = new ArrayList()

    templatePatterns.add("**/*.jsp")
    templatePatterns.add("**/*.jspx")
    templatePatterns.add("**/*.htm")
    templatePatterns.add("**/*.html")

    def langProperties
    localizationLanguages.each { final lang ->
        langProperties = new Properties()
        file("src/main/resources-conf/imcms${lang.key}.properties").withInputStream { langProperties.load(it) }

        webInf {
            from rootFolderForTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/WEB-INF/templates/${lang.value}"
        }

        webInf {
            from rootFolderForTemplates
            exclude templatePatterns
            into "/WEB-INF/templates/${lang.value}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/imcms/${lang.value}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            exclude templatePatterns
            into "/imcms/${lang.value}"
        }
    }

    webInf {
        final def versionFile = new File("${tmpDir}/version.txt")
        doFirst {
            versionFile.text = version
        }
        from versionFile
        into "/WEB-INF/"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar

            //Ugly way to add war to publication with preserving correct final pom file
            //Haven't found solution with using components.web
            artifact war
        }
    }

    repositories {
        maven {
            credentials {
                username reposotiryUsername
                password reposotiryPassword
            }
            url "sftp://repo.imcode.com:2022/srv/www/repo.imcode.com/maven2"
        }
    }
}
