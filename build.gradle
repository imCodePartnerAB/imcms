import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'war'
    id 'pmd'

    id 'io.franzbecker.gradle-lombok' version '4.0.0'
}

group = "com.imcode.imcms"
version = "6.0.0-beta18-SNAPSHOT"

description = "imCMS"

sourceCompatibility = 14
targetCompatibility = 14

tasks.withType(JavaCompile) {
    options.encoding = projectBuildSourceEncoding
    options.fork = javaCompileFork
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.imcode.com/maven2"
    }
}

ext {
    springframeworkVersion = '5.2.22.RELEASE'
    hibernateVersion = '5.4.32.Final'
    solrVersion = '9.0.0'
    log4j2Version = '2.19.0'
    slf4jVersion = '1.7.36'
    junitVersion = '5.8.2'
    lombokVersion = '1.18.24'
    jacksonVersion = '2.13.2'
    mockitoVersion = '4.5.1'
    awsVersion = '1.12.232'
    aspectjVersion = '1.9.8'
    tikaVersion = '2.4.1'

    sharedManifest = manifest {
        attributes "Build-Date": new Date()
        attributes "Application-Version": project.version
        attributes "Build-Jdk": System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        attributes "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        attributes "Built-By": project.hasProperty('BF_USER') ? project.getProperty('BF_USER', null) : System.getProperty('user.name')
    }
}

dependencies {
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "com.drewnoakes:metadata-extractor:2.18.0"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'org.opensaml:opensaml:2.6.4'

    implementation "com.zaxxer:HikariCP:5.0.1"

    implementation("com.imcode.db:imcode-db:0.7") {
        exclude(module: 'junit')
    }
    implementation "com.imcode.ldap:imcode-ldap:0.1"
    implementation("com.imcode.util:imcode-util:2.0.4") {
        exclude(module: "servlet-api")
        exclude(module: "commons-io")
    }
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation("commons-beanutils:commons-beanutils:1.9.4") {
        exclude(module: "commons-logging")
    }
    implementation "commons-dbutils:commons-dbutils:1.7"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation("commons-validator:commons-validator:1.7") {
        exclude(module: "commons-logging")
    }
    implementation "javax.inject:javax.inject:1"
    implementation "javax.servlet:javax.servlet-api:4.0.1"
    implementation "javax.servlet:jstl:1.2"
    implementation "javax.servlet.jsp:javax.servlet.jsp-api:2.3.3"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation("net.sf.ehcache:ehcache-web:2.0.4") {
        exclude(module: 'ehcache-core')
    }
    implementation "org.springframework:spring-context-support:${springframeworkVersion}"
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-email:1.5"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.apache.commons:commons-text:1.9"
    implementation 'commons-io:commons-io:2.11.0'
    implementation("org.apache.httpcomponents:httpclient:4.5.13") {
        exclude(module: "commons-logging")
    }
    implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"
    //return log4j due to old ldap dependency backward compatibility
    implementation("org.apache.hadoop:hadoop-client:3.3.3") {
        exclude(module: "commons-logging")
    }

    implementation "org.apache.lucene:lucene-queryparser:${solrVersion}"
    implementation("org.apache.solr:solr-core:${solrVersion}")

    implementation("org.apache.tika:tika-core:${tikaVersion}")
    implementation("org.apache.tika:tika-parsers-standard-package:${tikaVersion}")

    runtimeOnly "org.aspectj:aspectjrt:${aspectjVersion}"
    runtimeOnly "org.aspectj:aspectjweaver:${aspectjVersion}"
    implementation("org.hibernate:hibernate-ehcache:${hibernateVersion}") {
        exclude(module: "ehcache-core")
    }
    implementation 'org.hibernate.validator:hibernate-validator:7.0.4.Final'
    implementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.springframework:spring-aop:${springframeworkVersion}"
    implementation("org.springframework:spring-core:${springframeworkVersion}") {
        exclude(module: 'commons-logging')
    }
    implementation "org.springframework:spring-orm:${springframeworkVersion}"
    implementation "org.springframework:spring-webmvc:${springframeworkVersion}"
    implementation "org.springframework.data:spring-data-jpa:2.3.9.RELEASE"
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'javax.interceptor:javax.interceptor-api:1.2.2'
    implementation ("com.amazonaws:aws-java-sdk-s3:${awsVersion}"){
        exclude(module: "commons-logging")
    }

    //Azure AD dependencies
    implementation "com.microsoft.azure:adal4j:1.6.3"

    implementation "com.fasterxml:classmate:1.5.1"
    implementation "javax.el:javax.el-api:3.0.0"
    implementation "mysql:mysql-connector-java:8.0.29"
    implementation "org.hibernate:hibernate-core:${hibernateVersion}"

    testImplementation 'com.jayway.jsonpath:json-path-assert:2.7.0'
    testImplementation 'org.dbunit:dbunit:2.7.3'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.skyscreamer:jsonassert:1.5.0"
    testImplementation "org.springframework:spring-test:${springframeworkVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

final def mavenProps = new Properties() //Migrated maven properties
//Used to merge build and server properties file with replacement of inplace variables usage
final def buildProps = new Properties()
final def serverProps = new Properties()

final def tmpDir = "${buildDir}/tmp/" //Directory to hold temporary data

final def localizationLanguages = new HashMap<String, String>() //Translation Languages

task initParams() {
    mavenProps.setProperty("log4j2.configuration.status", "info")
    mavenProps.setProperty("log4j2.root.level", "info")
    mavenProps.setProperty("log4j2.hibernate.level", "error")
    mavenProps.setProperty("log4j2.console-appender.level", "off")

    localizationLanguages.put("", "en")
    localizationLanguages.put("_sv", "sv")

    file("build.properties").withInputStream { buildProps.load(it) }

    buildProps.setProperty("imcms.version", project.version as String)
    file("src/main/resources-conf/server.properties").withInputStream { serverProps.load it }
}

task explodedWar(type: Sync, dependsOn: war) {
    into "${buildDir}/libs/exploded/${project.name}-${project.version}.war/"
    with war
}

task mergeProperties() {
    final def lines = file("src/main/resources-conf/server.properties").readLines()

    final def mergedProperties = new ArrayList<String>()
    final def customProps = buildProps.clone()

    lines.each {
        buildProps.each { final prop ->
            if (it.matches("^" + prop.key + "\\s*= *.*\\s*\$")) {
                it = prop.toString()
                customProps.remove(prop.key)
            }
        }

        mergedProperties.add(it)
    }

    mergedProperties.addAll(customProps.findAll())

    doLast {
        final def mergedPropertiesFile = file("${buildDir}/libs/exploded/${project.name}-${project.version}.war/WEB-INF/conf/server.properties")
        mergedPropertiesFile.withWriter { final out ->
            mergedProperties.each {
                out.println it
            }
        }
    }
}

task installWebDependencies(type: Exec) {
    executable = 'npm'
    args = ["install", "--prefix", "src/main/webapp/"]
}

task buildWeb(type: Exec, dependsOn: installWebDependencies) {
    executable = 'npm'
    args = ["run", "build:prod", "--prefix", "src/main/webapp/"]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
    manifest {
        from sharedManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}


task webZip(type: Zip) {
    archiveClassifier = 'web'
    archiveExtension = 'zip'
    from 'src/main/webapp'
    exclude "node_modules"
    exclude "dist"
    exclude "WEB-INF"
    exclude "**/*.jsp"
}

tasks.war {
    duplicatesStrategy = DuplicatesStrategy.WARN
    it.dependsOn initParams
    it.dependsOn test
    it.dependsOn buildWeb
}

explodedWar.finalizedBy mergeProperties

//Plugins setting up
lombok {
    version = lombokVersion
    sha256 = ""
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDirectory.getAsFile().get()
        testOutputDir = compileTestJava.destinationDirectory.getAsFile().get()
    }
}

pmd {//Here is available list of rules - https://pmd.github.io/pmd-6.5.0/pmd_rules_java.html
    ignoreFailures = true
}

jar {
    doFirst {
        manifest {
            from sharedManifest
        }
    }
    archiveClassifier = 'classes'
}

javadoc {
    options.encoding = projectBuildSourceEncoding
}

test {
    doFirst {
        copy {
            from "${buildDir}/resources/test"
            into "${buildDir}/classes/java/test"
        }
        copy {
            from "${buildDir}/resources/main"
            into "${buildDir}/classes/java/test"
        }
    }
    useJUnitPlatform()
}

war {
    exclude "dependency_path_resolver.js"
    exclude "node_modules"
    exclude "js"
    exclude ".babelrc"
    exclude "package-lock.json"
    exclude "base.config.js"
    exclude "webpack.config.js"
    exclude "prod.config.js"

    manifest {
        from sharedManifest
    }

    //Copying configuration files
    webInf {
        from "src/main/resources"
        from "src/main/resources-conf"

        include "server.properties"
        include "imcms*.properties"
        include "*.conf"
        include "log4j2.xml"
        include "*.json"
        into "/WEB-INF/conf"
        filter(ReplaceTokens, tokens: serverProps)
        filter(ReplaceTokens, tokens: buildProps)
        filter(ReplaceTokens, tokens: mavenProps, beginToken: '${', endToken: '}')
    }

    //Copying ehcache configuration files
    webInf {
        from "src/main/resources"
        include "ehcache.xml"
        include "ehcache.xsd"
        into "/WEB-INF/classes"
    }

    //Template localization
    final def rootFolderForTemplates = "src/main/webapp/WEB-INF/templates/lang"
    final def rootFolderForImcmsTemplates = "src/main/webapp/imcms/lang"

    final def templatePatterns = new ArrayList()

    templatePatterns.add("**/*.jsp")
    templatePatterns.add("**/*.jspx")
    templatePatterns.add("**/*.htm")
    templatePatterns.add("**/*.html")

    def langProperties
    localizationLanguages.each { final lang ->
        langProperties = new Properties()
        file("src/main/resources/imcms${lang.key}.properties").withInputStream { langProperties.load(it) }

        webInf {
            from rootFolderForTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/WEB-INF/templates/${lang.value}"
        }

        webInf {
            from rootFolderForTemplates
            exclude templatePatterns
            into "/WEB-INF/templates/${lang.value}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/imcms/${lang.value}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            exclude templatePatterns
            into "/imcms/${lang.value}"
        }
    }

    webInf {
        final def versionFile = new File("${tmpDir}/version.txt")
        doFirst {
            versionFile.text = project.version
        }
        from versionFile
        into "/WEB-INF/"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact webZip

            //Ugly way to add war to publication with preserving correct final pom file
            //Haven't found solution with using components.web
            artifact war
        }
    }

    repositories {
        maven {
            credentials {
                username reposotiryUsername
                password reposotiryPassword
            }
            url "sftp://repo.imcode.com:2022/srv/www/repo.imcode.com/maven2"
        }
    }
}
