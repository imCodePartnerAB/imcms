import com.eriwen.gradle.css.tasks.MinifyCssTask
import com.eriwen.gradle.js.tasks.MinifyJsTask
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0' }
}

plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'idea'
    id 'war'

    id 'io.franzbecker.gradle-lombok' version '1.12'
    id "com.eriwen.gradle.js" version "2.14.1"
    id "com.eriwen.gradle.css" version "2.14.0"
//    id 'nebula.maven-publish' version '8.0.0'
}

apply plugin: 'org.junit.platform.gradle.plugin'
//apply plugin: 'nebula.lint'
//apply plugin: 'nebula.maven-publish'
//apply plugin: 'pmd'

group = "com.imcode.imcms"
version = "6.0.0-beta3-SNAPSHOT"

description = """imCMS"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = projectBuildSourceEncoding
    options.fork = javaCompileFork
}

repositories {
    mavenCentral()
    maven { url "http://repo.boundlessgeo.com/main/" }
    maven { url "http://repo.imcode.com/maven2" }
}

ext {
    springframeworkVersion = '4.3.13.RELEASE'
    solrVersion = '7.2.1'
    slf4jVersion = '1.7.25'
    junitVersion = '5.2.0'
}

dependencies {
    compile("org.springframework:spring-core:${springframeworkVersion}") {
        exclude(module: 'commons-logging')
    }
    compile "org.springframework:spring-webmvc:${springframeworkVersion}"
    compile "org.springframework:spring-orm:${springframeworkVersion}"
    compile "org.springframework:spring-aop:${springframeworkVersion}"
    compile("org.springframework.data:spring-data-jpa:1.11.7.RELEASE") {
        exclude(module: 'hibernate-jpa-2.1-api')
    }

    compile "org.aspectj:aspectjrt:1.8.13"
    compile "org.aspectj:aspectjweaver:1.8.13"

    compile "net.sf.ehcache:ehcache:2.7.0"
    compile("net.sf.ehcache:ehcache-web:2.0.4") {
        exclude(module: 'ehcache-core')
    }

    compile "org.hibernate:hibernate-entitymanager:4.3.11.Final"
    compile "org.hibernate:hibernate-validator:5.4.2.Final"
    compile("org.hibernate:hibernate-ehcache:4.3.11.Final") {
        exclude(module: "ehcache-core")
    }

    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "javax.servlet:jstl:1.2"
    compile "javax.inject:javax.inject:1"
    compile "javax.validation:validation-api:1.1.0.Final"

    compile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1"
    compile "javax.el:javax.el-api:3.0.0"

    compile("com.imcode.db:imcode-db:0.7") {
        exclude(module: 'junit')
    }
    compile "com.imcode.ldap:imcode-ldap:0.1"
    compile("com.imcode.util:imcode-util:2.0.4") {
        exclude(module: "servlet-api")
        exclude(module: "commons-io")
    }

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:2.10.0"

    compile "org.apache.commons:commons-collections4:4.1"
    compile "org.apache.commons:commons-lang3:3.6"
    compile "org.apache.commons:commons-text:1.1"
    compile "org.apache.commons:commons-email:1.4"
    compile "org.apache.commons:commons-dbcp2:2.1.1"

    compile "org.projectlombok:lombok:1.16.20"
    compile "com.drewnoakes:metadata-extractor:2.11.0"
    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile("org.apache.tika:tika-parsers:1.18") {
        exclude(module: "commons-logging")
        exclude(module: "asm")
        exclude(module: "commons-io")
    }

    compile "commons-dbutils:commons-dbutils:1.6"
    compile "commons-lang:commons-lang:2.6"
    compile("commons-validator:commons-validator:1.6") {
        exclude(module: "commons-logging")
    }

    compile("org.apache.solr:solr-core:${solrVersion}") {
        exclude(module: 'slf4j-jdk14')
        exclude(module: 'javax.servlet')
        exclude(module: 'javax.transaction')
        exclude(module: 'javax.annotation')
        exclude(module: 'jackson-databind')
        exclude(module: 'jackson-core')
        exclude(module: 'commons-codec')
        exclude(module: 'commons-collections')
        exclude(module: 'commons-fileupload')
        exclude(module: 'commons-lang3')
        exclude(module: 'commons-lang')
        exclude(module: 'dom4j')
        exclude(module: 'javax.servlet-api')
        exclude(module: 'httpclient')
        exclude(module: 'httpcore')
        exclude(module: 'asm')
        exclude(module: 'jcl-over-slf4j')
        exclude(module: 'slf4j-api')
        exclude(module: 'commons-exec')
        exclude(module: 'commons.lang')
        exclude(module: 'jackson-annotations')
    }
    compile("org.apache.httpcomponents:httpclient:4.5.4") {
        exclude(module: "commons-logging")
    }
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.5"

    compile "org.jsoup:jsoup:1.10.2"
    compile("com.jcabi:jcabi-w3c:1.3") {
        exclude(module: "commons-io")
    }

    runtime "com.fasterxml:classmate:1.3.3"
    runtime "mysql:mysql-connector-java:5.1.38"
    runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

    testCompile "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.dbunit:dbunit:2.5.1"
    testCompile "org.mockito:mockito-core:2.19.0"
    testCompile "org.mockito:mockito-junit-jupiter:2.19.0"
    testCompile "org.springframework:spring-test:${springframeworkVersion}"
    testCompile "com.jcabi:jcabi-matchers:1.4"
    testCompile "com.jayway.jsonpath:json-path-assert:2.2.0"
    testCompile "org.skyscreamer:jsonassert:1.5.0"

}

//Migrated maven properties
def mavenProps = new Properties()

//Used to merge build and server properties file with replacement of inplace variables usage
def buildProps = new Properties()
def tmpProps = new Properties()

//Directory to hold temporary data
def tmpDir = "${buildDir}/tmp/"

//Translation Languages
def localizationLanguages = new ArrayList()

task copyPropertyFileFromTemplate(type: Copy) {
    from projectDir
    into projectDir
    include 'build.properties.template'
    rename '(.*).template', '$1'
    doLast {
        throw new GradleException(
                '`build.properties` file was just created, fill in required properties and run execution again'
        )
    }
}

task checkPropertyFile(type: Copy) {
    def buildProperties = new File("${projectDir}/build.properties")
    if (!buildProperties.exists()) {
        copyPropertyFileFromTemplate.execute()
    }
}

task initParams(dependsOn: checkPropertyFile) {
    mavenProps.setProperty("log4j.threshold", "info")
    mavenProps.setProperty("log4j.hibernate.level", "error")
    mavenProps.setProperty("log4j.console-appender.threshold", "off")

    localizationLanguages.add("en")
    localizationLanguages.add("sv")

    file("build.properties").withInputStream { buildProps.load(it) }
}

task copyProperties(type: Copy, dependsOn: initParams) {
    from "${projectDir}"
    include "build.properties"

    //Needed to perform this two times to replace inplace variables
    filter(ReplaceTokens, tokens: buildProps)
    filter(ReplaceTokens, tokens: buildProps)
    into tmpDir
}

task importProperties(dependsOn: copyProperties) {
    doLast {
        file("${tmpDir}/build.properties").withInputStream { tmpProps.load(it) }
    }
}

task explodedWar(type: Sync, dependsOn: war) {
    into "${buildDir}/libs/exploded"
    with war
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task individualJsMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyJs") })
task individualCssMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyCss") })

//Task dependency settings
copyProperties.finalizedBy importProperties
tasks.war.dependsOn importProperties
tasks.war.dependsOn test
tasks.war.dependsOn individualJsMinify
tasks.war.dependsOn individualCssMinify

//Plugins setting up
lombok {
    version = "1.16.20"
    sha256 = ""
}

idea {
    module {
        inheritOutputDirs = false
    }
}

jar.classifier = "classes"

//gradleLint.rules = ['all-dependency']

javascript.source {
    custom {
        js {
            srcDir 'src/main/webapp/'
            include "**/*.js"
            exclude "**/*.min.js"
        }
    }
}

css.source {
    custom {
        css {
            srcDir 'src/main/webapp/'
            include "**/*.css"
            exclude "**/*.min.css"
        }
    }
}

javascript.source.custom.js.files.eachWithIndex { jsFile, idx ->
    tasks.create(name: "dominifyJs${idx}", type: MinifyJsTask) {
        def tmpFile = new File("${projectDir}/src/main/webapp")
        def fileLocation = tmpFile.toPath().relativize(jsFile.toPath()).toFile()

        source = jsFile
        dest = "${tmpDir}/jsMin/${fileLocation}"
    }
}

css.source.custom.css.files.eachWithIndex { cssFile, idx ->
    tasks.create(name: "dominifyCss${idx}", type: MinifyCssTask) {
        def tmpFile = new File("${projectDir}/src/main/webapp")
        def fileLocation = tmpFile.toPath().relativize(cssFile.toPath()).toFile()

        source = cssFile
        dest = "${tmpDir}/cssMin/${fileLocation}"
    }
}

jar.doFirst {
    manifest {
        def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
        if (new File(manifestFile).exists())
            from(manifestFile)

        attributes "Build-Date": new Date()
        attributes "Application-Version": project.version
        attributes "Build-Jdk": System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")"
        attributes "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        attributes "Built-By": project.hasProperty("BF_USER") ? project.getProperty("BF_USER") : System.getProperty("user.name")
    }
    classifier 'classes'
}

jshint {
    jshint.options.source = javascript.source.custom.js.files
    jshint.options.dest = "${buildDir}/jshint.out"
}

csslint {
    source = css.source.custom.css.files
    dest = "${buildDir}/csslint.out"
}

war {
    classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
//    duplicatesStrategy "include"

    manifest {
        def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
        if (new File(manifestFile).exists())
            from(manifestFile)

        attributes "Build-Date": new Date()
        attributes "Application-Version": project.version
        attributes "Build-Jdk": System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")"
        attributes "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        attributes "Built-By": project.hasProperty("BF_USER") ? project.getProperty("BF_USER") : System.getProperty("user.name")
    }

    //Copying configuration files
    webInf {
        from "src/main/resources"
        from "src/main/resources-conf"

        include "server.properties"
        include "imcms_*.properties"
        include "*.conf"
        include "log4j.xml"
        include "*.json"
        into "/WEB-INF/conf"
        filter(ReplaceTokens, tokens: tmpProps)
        filter(ReplaceTokens, tokens: mavenProps, beginToken: '${', endToken: '}')
    }

    //Copying ehcache configuration files
    webInf {
        from "src/main/resources"
        include "ehcache.xml"
        include "ehcache.xsd"
        into "/WEB-INF/classes"
    }

    //Template localization
    def rootFolderForTemplates = "src/main/webapp/WEB-INF/templates/lang"
    def rootFolderForImcmsTemplates = "src/main/webapp/imcms/lang"

    def templatePatterns = new ArrayList()

    templatePatterns.add("**/*.jsp")
    templatePatterns.add("**/*.jspx")
    templatePatterns.add("**/*.htm")
    templatePatterns.add("**/*.html")

    def langProperties
    localizationLanguages.each { lang ->
        langProperties = new Properties()
        file("src/main/resources-conf/imcms_${lang}.properties").withInputStream { langProperties.load(it) }

        webInf {
            from rootFolderForTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/WEB-INF/templates/${lang}"
        }

        webInf {
            from rootFolderForTemplates
            exclude templatePatterns
            into "/WEB-INF/templates/${lang}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            include templatePatterns
            filter(ReplaceTokens, tokens: langProperties, beginToken: "<? ", endToken: " ?>")
            into "/imcms/${lang}"
        }

        webInf {
            from rootFolderForImcmsTemplates
            exclude templatePatterns
            into "/imcms/${lang}"
        }
    }

    webInf {
        doLast {
            from "${tmpDir}/jsMin/"
            into "/"
        }
    }

    webInf {
        doLast {
            from "${tmpDir}/cssMin/"
            into "/"
        }
    }

    webInf {
        def versionFile = new File("${tmpDir}/version.txt")
        doFirst {
            versionFile.text = version
        }
        from versionFile
        into "/WEB-INF/"
    }
}
//
//war {
//    from { project(':imcms').webAppDir }
//}
//artifacts {
////    archives components.java
//    archives sourceJar
////    archives file: 'A.jar', name: 'A', type: 'jar'
////    archives file: 'A-sources.jar', name: 'A', type: 'jar', classifier: 'sources'
////    archives file: 'B.jar', name: 'B', type: 'jar'
////    archives file: 'B-sources.jar', name: 'B', type: 'jar', classifier: 'sources'
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

//            artifact classesJar {
//                classifier 'classes'
//            }
        }
        mavenWeb(MavenPublication) {
            from components.web
        }
    }

//    repositories {
//        maven {
//            credentials {
//                username ""
//                password ""
//            }
//
//            if(project.version.endsWith('-SNAPSHOT')) {
//                url "http://.../snapshots/"
//            } else {
//                url "http:/.../internal/"
//            }
//        }
//    }
}