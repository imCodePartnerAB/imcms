package com.imcode.imcms.servlet;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.log4j.Logger;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.SecureRandom;
import java.security.spec.KeySpec;

/**
 * Provides functionality for passwords encryption and validation.
 *
 * @since 4.0.7
 */
public class LoginPasswordManager {

    private static final int SALT_LENGTH = 16;

    private static final String KEY_ALGORITHM = "PBKDF2WithHmacSHA1";
    private static Logger logger = Logger.getLogger(LoginPasswordManager.class);
    private byte[] sharedSalt;

    /**
     * Creates new instance of UserLoginPasswordManager without shared salt.
     */
    public LoginPasswordManager() {
        this(null);
    }

    /**
     * @param sharedSalt a salt used in all passwords encryption additionally to random salt.
     */
    public LoginPasswordManager(String sharedSalt) {
        this.sharedSalt = sharedSalt == null ? new byte[0] : sharedSalt.getBytes();
    }

    /**
     * @param password plain text password
     * @return encrypted password as a hex string
     */
    public String encryptPassword(String password) {
        SecureRandom sr = new SecureRandom();
        byte randomSalt[] = sr.generateSeed(SALT_LENGTH);

        return encryptPassword(password, randomSalt);
    }

    /**
     * Validates password against hash generated by {@link #encryptPassword} method.
     *
     * @param password          plain text password
     * @param encryptedPassword encrypted password as a hex string
     * @return if password is valid
     */
    public boolean validatePassword(String password, String encryptedPassword) {
        try {
            byte[] randomSaltFollowedByHash = Hex.decodeHex(encryptedPassword.toCharArray());
            byte[] randomSalt = ArrayUtils.subarray(randomSaltFollowedByHash, 0, SALT_LENGTH);

            return encryptPassword(password, randomSalt).equals(encryptedPassword);
        } catch (DecoderException e) {
            logger.error(e);
            return false;
        }
    }

    /**
     * Encrypts password using salt compound from sharedSalt and randomSalt.
     *
     * @param password   plain text password.
     * @param randomSalt randomly generated salt.
     * @return random salt followed by encrypted password as a hex string.
     */
    private String encryptPassword(String password, byte[] randomSalt) {
        try {
            byte[] salt = ArrayUtils.addAll(sharedSalt, randomSalt);
            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 2048, 160);
            SecretKeyFactory f = SecretKeyFactory.getInstance(KEY_ALGORITHM);
            byte[] hash = f.generateSecret(spec).getEncoded();
            byte[] randomSaltFollowedByHash = ArrayUtils.addAll(randomSalt, hash);

            return Hex.encodeHexString(randomSaltFollowedByHash);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
