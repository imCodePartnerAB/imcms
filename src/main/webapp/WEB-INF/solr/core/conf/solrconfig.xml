<?xml version="1.0" encoding="UTF-8" ?>
<config>
    <luceneMatchVersion>LUCENE_41</luceneMatchVersion>

    <!-- Data Directory

         Used to specify an alternate directory to hold all index data
         other than the default ./data under the Solr home.  If
         replication is in use, this should match the replication
         configuration.
      -->
    <dataDir>${solr.data.dir:}</dataDir>

    <!-- The DirectoryFactory to use for indexes.

         solr.StandardDirectoryFactory is filesystem
         based and tries to pick the best implementation for the current
         JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
         wraps solr.StandardDirectoryFactory and caches small files in memory
         for better NRT performance.

         One can force a particular implementation via solr.MMapDirectoryFactory,
         solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

         solr.RAMDirectoryFactory is memory based, not
         persistent, and doesn't work with replication.
      -->
    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

    <!-- These settings control low-level behavior of indexing -->
    <indexConfig>
    </indexConfig>


    <!-- The default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">
    </updateHandler>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Query section - these settings control query time things like caches
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!-- Max Boolean Clauses

             Maximum number of clauses in each BooleanQuery,  an exception
             is thrown if exceeded.

             ** WARNING **

             This option actually modifies a global Lucene property that
             will affect all SolrCores.  If multiple solrconfig.xml files
             disagree on this property, the value at any given moment will
             be based on the last SolrCore to be initialized.

          -->
        <maxBooleanClauses>1024</maxBooleanClauses>



        <!-- Solr Internal Query Caches

             There are two implementations of cache available for Solr,
             LRUCache, based on a synchronized LinkedHashMap, and
             FastLRUCache, based on a ConcurrentHashMap.

             FastLRUCache has faster gets and slower puts in single
             threaded operation and thus is generally faster than LRUCache
             when the hit ratio of the cache is high (> 75%), and may be
             faster under other scenarios on multi-cpu systems.
        -->

        <!-- Filter Cache

             Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.  When a
             new searcher is opened, its caches may be prepopulated or
             "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For
             LRUCache, the autowarmed items will be the most recently
             accessed items.

             Parameters:
               class - the SolrCache implementation LRUCache or
                   (LRUCache or FastLRUCache)
               size - the maximum number of entries in the cache
               initialSize - the initial capacity (number of entries) of
                   the cache.  (see java.util.HashMap)
               autowarmCount - the number of entries to prepopulate from
                   and old cache.
          -->
        <filterCache class="solr.FastLRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
          -->
        <queryResultCache class="solr.LRUCache"
                          size="512"
                          initialSize="512"
                          autowarmCount="0"/>


        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
          -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="0"/>

        <!-- Lazy Field Loading

             If true, stored fields that are not requested will be loaded
             lazily.  This can result in a significant speed improvement
             if the usual case is to not load all stored fields,
             especially if the skipped fields are large compressed text
             fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 49 will be collected and cached.  Any further
             requests in that range can be satisfied via the cache.
          -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>
    </query>


    <!-- Request Dispatcher

         This section contains instructions for how the SolrDispatchFilter
         should behave when processing requests for this SolrCore.

         handleSelect is a legacy option that affects the behavior of requests
         such as /select?qt=XXX

         handleSelect="true" will cause the SolrDispatchFilter to process
         the request and dispatch the query to a handler specified by the
         "qt" param, assuming "/select" isn't already registered.

         handleSelect="false" will cause the SolrDispatchFilter to
         ignore "/select" requests, resulting in a 404 unless a handler
         is explicitly registered with the name "/select"

         handleSelect="true" is not recommended for new users, but is the default
         for backwards compatibility
      -->
    <requestDispatcher handleSelect="false">
        <!-- HTTP Caching

             Set HTTP caching related parameters (for proxy caches and clients).

             The options below instruct Solr not to output any HTTP Caching
             related headers
          -->
        <httpCaching never304="true" />
    </requestDispatcher>


    <!-- Request Handlers

         http://wiki.apache.org/solr/SolrRequestHandler

         Incoming queries will be dispatched to a specific handler by name
         based on the path specified in the request.

         Legacy behavior: If the request path uses "/select" but no Request
         Handler has that name, and if handleSelect="true" has been specified in
         the requestDispatcher, then the Request Handler is dispatched based on
         the qt parameter.  Handlers without a leading '/' are accessed this way
         like so: http://host/app/[core/]select?qt=name  If no qt is
         given, then the requestHandler that declares default="true" will be
         used or the one named "standard".

         If a Request Handler is declared with startup="lazy", then it will
         not be initialized until the first request that uses it.

      -->

    <!-- requestHandler plugins... incoming queries will be dispatched to the
        correct handler based on the path or the qt (query type) param.
        Names starting with a '/' are accessed with the a path equal to the
        registered name.  Names without a leading '/' are accessed with:
        http://host/app/select?qt=name
        If no qt is defined, the requestHandler that declares default="true"
        will be used.
    -->

    <requestHandler name="/select" class="solr.SearchHandler"/>

    <!-- A request handler that returns indented JSON by default -->
    <requestHandler name="/query" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
            <str name="df">text</str>
        </lst>
    </requestHandler>


    <!-- realtime get handler, guaranteed to return the latest stored fields of
         any document, without the need to commit or open a new searcher.  The
         current implementation relies on the updateLog feature being enabled. -->
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
        <lst name="defaults">
            <str name="omitHeader">true</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
        </lst>
    </requestHandler>

    <!-- Update Request Handler.

         http://wiki.apache.org/solr/UpdateXmlMessages

         The canonical Request Handler for Modifying the Index through
         commands specified using XML, JSON, CSV, or JAVABIN

         Note: Since solr1.1 requestHandlers requires a valid content
         type header if posted in the body. For example, curl now
         requires: -H 'Content-type:text/xml; charset=utf-8'

         To override the request content type and force a specific
         Content-type, use the request parameter:
           ?update.contentType=text/csv

         This handler will pick a response format to match the input
         if the 'wt' parameter is not explicit
      -->
    <requestHandler name="/update" class="solr.UpdateRequestHandler">
    </requestHandler>

    <!-- Field Analysis Request Handler

         RequestHandler that provides much the same functionality as
         analysis.jsp. Provides the ability to specify multiple field
         types and field names in the same request and outputs
         index-time and query-time analysis for each of them.

         Request parameters are:
         analysis.fieldname - field name whose analyzers are to be used

         analysis.fieldtype - field type whose analyzers are to be used
         analysis.fieldvalue - text for index-time analysis
         q (or analysis.q) - text for query time analysis
         analysis.showmatch (true|false) - When set to true and when
             query analysis is performed, the produced tokens of the
             field value analysis will be marked as "matched" for every
             token that is produces by the query analysis
     -->
    <requestHandler name="/analysis/field"
                    startup="lazy"
                    class="solr.FieldAnalysisRequestHandler" />

    <!-- Document Analysis Handler

         http://wiki.apache.org/solr/AnalysisRequestHandler

         An analysis handler that provides a breakdown of the analysis
         process of provided documents. This handler expects a (single)
         content stream with the following format:

         <docs>
           <doc>
             <field name="id">1</field>
             <field name="name">The Name</field>
             <field name="text">The Text Value</field>
           </doc>
           <doc>...</doc>
           <doc>...</doc>
           ...
         </docs>

      Note: Each document must contain a field which serves as the
      unique key. This key is used in the returned response to associate
      an analysis breakdown to the analyzed document.

      Like the FieldAnalysisRequestHandler, this handler also supports
      query analysis by sending either an "analysis.query" or "q"
      request parameter that holds the query text to be analyzed. It
      also supports the "analysis.showmatch" parameter which when set to
      true, all field tokens that match the query tokens will be marked
      as a "match".
    -->
    <requestHandler name="/analysis/document"
                    class="solr.DocumentAnalysisRequestHandler"
                    startup="lazy" />


    <!-- Admin Handlers

         Admin Handlers - This will register all the standard admin
         RequestHandlers.
      -->
    <requestHandler name="/admin/"
                    class="solr.admin.AdminHandlers" />

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
        <lst name="invariants">
            <str name="q">solrpingquery</str>
        </lst>
        <lst name="defaults">
            <str name="echoParams">all</str>
        </lst>
        <!-- An optional feature of the PingRequestHandler is to configure the
             handler with a "healthcheckFile" which can be used to enable/disable
             the PingRequestHandler.
             relative paths are resolved against the data dir
          -->
        <!-- <str name="healthcheckFile">server-enabled.txt</str> -->
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- Legacy config for the admin interface -->
    <admin>
        <defaultQuery>*:*</defaultQuery>
    </admin>
</config>